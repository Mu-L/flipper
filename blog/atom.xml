<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fbflipper.com/blog</id>
    <title>Flipper Blog</title>
    <updated>2021-10-14T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fbflipper.com/blog"/>
    <subtitle>Flipper Blog</subtitle>
    <icon>https://fbflipper.com/img/icon.png</icon>
    <entry>
        <title type="html"><![CDATA[Flipper 2021 Roadmap Update]]></title>
        <id>Flipper 2021 Roadmap Update</id>
        <link href="https://fbflipper.com/blog/2021/10/14/roadmap"/>
        <updated>2021-10-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is next for Flipper?]]></summary>
        <content type="html"><![CDATA[<p>Over the last year, the Flipper adoption in the open source community has doubled, and for many React Native developers Flipper has become the default debugging tool.
As the community continues to grow, we believe itâ€™s important to share updates about our plans. </p><h2>A short look back</h2><p>During the first half of 2021, we have introduced support for connecting to physical iOS devices by leveraging <a href="https://fbidb.io/">idb</a>.
We have also introduced the <a href="https://fbflipper.com/docs/extending/sandy-migration">Sandy plugin architecture</a>, which simplifies the creation of plugins and provides a richer set of UI components by adopting <a href="https://ant.design/components/overview/">Ant Design</a>.
The new architecture is strongly typed, easily unit testable and allows us to <a href="https://youtu.be/WCs09c1B1Lk">process and render data much faster</a>, which has (at Facebook at least) significantly increased the up-time of Flipper.
The underlying mechanism has been open sourced as the <a href="https://www.npmjs.com/package/flipper-data-source"><code>flipper-data-source</code></a> package.
And last but not least, we introduced dark mode support.</p><h2>What is ahead?</h2><p>Our focus for Flipper for Q4 2021 is to remove friction and make it easier to onboard new targets.
This is because, in many instances, Flipper isn&#x27;t used just to debug mobile apps, but also to debug many of our other products, such as native and Electron-based desktop applications, and devices like Oculus, Portal or feature phones.</p><p>Looking ahead, we plan to:</p><ul><li><strong>Move away from RSocket</strong>. RSocket is a protocol that served us well for encrypted communication between Flipper and clients. However, especially in the React Native world, the dependencies it brings has been a continuous source of build issues with any new iOS update. We are now testing internally a version of Flipper that uses secured WebSocket connections instead. The resulting simplified dependency chain should prevent a lot of current and future build issues.</li><li><strong>Introduce a headless Flipper version</strong>. The Flipper team is currently investing in decoupling all network, OS and device interaction logic from the Flipper front end. This will make it possible to run Flipper as a headless service, and embed the UI in any web-based stack. By default Flipper will remain an Electron app, but this change introduces a lot of new possibilities: It will be possible to run Flipper headless on CI systems to collect data during test runs. It will be possible to embed the Flipper UI inside IDEs to reduce context switching. To achieve this, the Flipper code base will be split into many smaller packages.</li><li><strong>Improve the Flipper marketplace</strong>. We are working on an improved Flipper plugin marketplace, to help promote plugins, and create a better understanding of what plugins do, and how they are supported.</li><li><strong>Create a reference WebSocket implementation</strong>. For Native mobile apps and React Native, there are standard packages to register plugins and connect to the Flipper desktop application. Although several WebSocket implementations exist to do the same for web apps, we don&#x27;t have a standardized SDK and example project for integrating web applications with Flipper. By changing this we&#x27;ll hope to make it easy for front-end engineers to leverage Flipper.</li><li><strong>Add support for React Native Windows</strong>. &#x27;nough said.</li></ul><h2>Flipper needs you!</h2><p>Flipper is maintained by a small team at Facebook, yet serving over a hundred plugins and dozens of different targets. Our team&#x27;s goal is to support Flipper as a plugin-based platform for which we maintain the infrastructure.
We don&#x27;t typically invest in individual plugins, but we do love plugin improvements. For example, the support for mocking network requests (on Android) was entirely contributed by the community (thanks <a href="https://github.com/bizzguy">James Harmon</a>!). As was Protobuf support (thanks <a href="https://github.com/hbmartin">Harold Martin</a>!).</p><p>For that reason, we&#x27;ve marked many requests in the issue tracker as <a href="https://github.com/facebook/flipper/issues?q=is%3Aissue+is%3Aopen+label%3A%22PR+welcome%22">PR Welcome</a>.
Contributing changes should be as simple as cloning the <a href="https://github.com/facebook/flipper">repository</a> and running <code>yarn &amp;&amp; yarn start</code> in the <code>desktop/</code> folder.</p><p>Investing in debugging tools, both generic ones or just for specific apps, will benefit iteration speed.
And we hope Flipper will make it as hassle free as possible to create your debugging tools.
For an overview of Flipper for React Native, and why and how to build your own plugins, we recommend checking out the <a href="https://youtu.be/WltZTn3ODW4">Flipper: The Extensible DevTool Platform for React Native</a> talk.</p><p>Happy debugging!</p>]]></content>
        <author>
            <name>Michel Weststrate</name>
            <uri>https://github.com/mweststrate</uri>
        </author>
    </entry>
</feed>